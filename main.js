!function(){"use strict";class e{constructor(e,t,r,s,i){this._name=e.name,this._link=e.link,this._isLiked=e.isLiked,this._id=e._id,this._cardSelector=t,this._handleImageClick=r,this._handleDelete=s,this._handleLike=i}_setEventListener(){this._cardLikeBtn=this._cardElement.querySelector(".card__group"),this._cardTrashBtn=this._cardElement.querySelector(".card__trash-bin"),this._cardImage=this._cardElement.querySelector(".card__image"),this._cardLikeBtn.addEventListener("click",(()=>{this._handleLike({isLiked:this._isLiked,id:this._id},this)})),this._cardTrashBtn.addEventListener("click",(()=>{this._handleDelete(this)})),this._cardImage.addEventListener("click",(()=>{this._handleImageClick(this)}))}_renderLikes(){this._isLiked?this._cardLikeBtn.classList.add("card__group_active"):this._cardLikeBtn.classList.remove("card__group_active")}setLike(e){this._isLiked=e,this._renderLikes()}handleTrashBtn(e){this._delete=e,this._cardElement.remove(),this._cardElement=null}_getTemplate(){return this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0),this._cardElement}generateCard(){return this._element=this._getTemplate(),this._setEventListener(),this._renderLikes(),this._cardTitle=this._element.querySelector(".card__title"),this._cardImage.src=this._link,this._cardImage.alt=this._name,this._cardTitle.textContent=this._name,this._element}}class t{constructor(e,t){this._options=e,this._formElement=t,this._buttonElement=this._formElement.querySelector(this._options.submitButtonSelector),this._inputList=[...this._formElement.querySelectorAll(this._options.inputSelector)]}_showInputError(){this._errorElement=document.querySelector(`.${this._inputElement.id}-error`),this._errorElement.textContent=this._inputElement.validationMessage,this._errorElement.classList.add(this._options.errorClass),this._inputElement.classList.add(this._options.inputClassError)}_hideInputError(){this._errorElement=this._formElement.querySelector(`.${this._inputElement.id}-error`),this._errorElement.textContent="",this._errorElement.classList.remove(this._options.errorClass),this._inputElement.classList.remove(this._options.inputClassError)}resetValidation(){this.toggleButtonState(),this._inputList.forEach((e=>{this._inputElement=e,this._hideInputError()}))}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}toggleButtonState(){this._hasInvalidInput()?this._buttonElement.setAttribute("disabled",!0):this._buttonElement.removeAttribute("disabled")}_checkInputValidity(){this._inputElement.validity.valid?this._hideInputError():this._showInputError()}_setEventListeners(){this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._inputElement=e,this._checkInputValidity(),this.toggleButtonState()}))}))}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}class r{constructor(e,t){let{data:r,renderer:s}=e;this._items=r,this._renderer=s,this._container=t}renderItems(){this._items.reverse().forEach(this._renderer)}addItem(e){this._container.prepend(e)}}class s{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t),this._closeBtn=this._popupElement.querySelector(".modal__close-btn")}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose=e=>{"Escape"===e.key&&this.close()};setEventListener(){this._closeBtn.addEventListener("click",(()=>{this.close()})),this._popupElement.addEventListener("mousedown",(e=>{e.target===this._popupElement&&this.close()}))}}class i extends s{constructor(e,t){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._handleFormSubmit=t,this._inputList=[...this._popupForm.querySelectorAll(".modal__input")],this._modalBtn=this._popupElement.querySelector(".modal__btn")}close(){super.close(),this._popupForm.reset()}_getValueInputs(){const e={};return this._inputList.forEach((t=>{e[t.name]=t.value})),e}renderLoading(e){this._modalBtn.textContent=e?"Saving...":"Save"}setEventListener(){this._popupForm.addEventListener("submit",(()=>{this._handleFormSubmit(this._getValueInputs())})),super.setEventListener()}}const n=document.querySelector(".page"),o=n.querySelector(".profile-modal"),a=n.querySelector(".cards__list"),l=n.querySelector(".profile__edit-btn"),c=n.querySelector(".profile__create-btn"),h=o.querySelector(".modal__input_type_name"),d=o.querySelector(".modal__input_type_occupation"),_=n.querySelector(".profile__edit-avatar"),u=new class{constructor(e){let{baseUrl:t,headers:r}=e;this._baseUrl=t,this._authorization=r.authorization,this._contentType=r["content-type"]}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:{authorization:this._authorization}}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}addNewCard(e){let{name:t,link:r}=e;return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:{authorization:this._authorization,"content-type":this._contentType},body:JSON.stringify({name:t,link:r})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}deleteCard(e){let{_id:t}=e;return fetch(`${this._baseUrl}/cards/${t}`,{method:"DELETE",headers:{authorization:this._authorization}}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}likeCard(e){let{isLiked:t,id:r}=e;return fetch(`${this._baseUrl}/cards/${r}/likes`,{method:t?"DELETE":"PUT",headers:{authorization:this._authorization}}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:{authorization:this._authorization}}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}editUserInfo(e){let{name:t,occupation:r}=e;return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:{authorization:this._authorization,"content-type":this._contentType},body:JSON.stringify({name:t,about:r})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}editUserImage(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:{authorization:this._authorization,"content-type":this._contentType},body:JSON.stringify({avatar:e})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"3c5909bd-d1c1-439d-8361-757b3ef3e3b4","content-type":"application/json"}}),m={};var p;p={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__btn",errorClass:"modal__input-error_active",inputClassError:"modal__input_type_error"},[...document.querySelectorAll(p.formSelector)].forEach((e=>{const r=new t(p,e),s=e.getAttribute("name");m[s]=r,r.enableValidation()}));const E=e=>{S.open(e)},L=e=>{I.open(),I.setSubmitAction((()=>{u.deleteCard(e).then((()=>{})).catch((e=>console.error(e))),I.close(),e.handleTrashBtn()}))},v=(e,t)=>{u.likeCard(e).then((e=>{t.setLike(e.isLiked)})).catch((e=>console.error(e)))},y=t=>new e(t,"#card__template",E,L,v).generateCard(),S=new class extends s{constructor(e){super({popupSelector:e}),this._pictureImage=document.querySelector(".picture-modal__image"),this._pictureTitle=document.querySelector(".picture-modal__title")}open(e){let{_name:t,_link:r}=e;this._pictureImage.src=r,this._pictureImage.alt=t,this._pictureTitle.textContent=t,super.open()}}(".picture-modal");S.setEventListener();const f=new i(".add-card-modal",(e=>{f.renderLoading(!0),f.close(),u.addNewCard(e).then((e=>{const t=y(e);C.addItem(t)})).catch((e=>console.error(e))).finally((()=>{f.renderLoading(!1)}))}));f.setEventListener();const g=new class{constructor(e,t,r){this._name=document.querySelector(e),this._occupation=document.querySelector(t),this._avatar=document.querySelector(r)}getUserInfo(){return{name:this._name.textContent,occupation:this._occupation.textContent}}setUserInfo(e){let{name:t,about:r,avatar:s}=e;this._name.textContent=t,this._occupation.textContent=r,this._avatar.src=s}changeUserPhoto(e){this._avatar.src=e}}(".profile__name",".profile__occupation",".profile__avatar"),k=new i(".profile-modal",(e=>{k.renderLoading(!0),k.close(),u.editUserInfo(e).then((e=>{g.setUserInfo(e)})).catch((e=>console.error(e))).finally((()=>{k.renderLoading(!1)}))}));k.setEventListener();const b=new i(".change-profile-modal",(e=>{let{url:t}=e;b.renderLoading(!0),b.close(),u.editUserImage(t).then((e=>{g.changeUserPhoto(e.avatar)})).catch((e=>console.error(e))).finally((()=>{b.renderLoading(!1)}))}));b.setEventListener();const I=new class extends s{constructor(e){super({popupSelector:e}),this._button=this._popupElement.querySelector(".modal__btn")}setSubmitAction(e){this._handleSubmit=e}setEventListener(){super.setEventListener(),this._button.addEventListener("click",(()=>{this._handleSubmit()}))}}(".delete-confirmation-modal");let C;I.setEventListener(),l.addEventListener("click",(()=>{m["profile-form"].resetValidation(),k.open();const e=g.getUserInfo();h.value=e.name,d.value=e.occupation})),c.addEventListener("click",(()=>{m["card-form"].resetValidation(),f.open()})),_.addEventListener("click",(()=>{m["change-profile-form"].resetValidation(),b.open()})),Promise.all([u.getInitialCards(),u.getUserInfo()]).then((e=>{g.setUserInfo(e[1]),console.log(e),C=new r({data:e[0],renderer:e=>{const t=y(e);C.addItem(t)}},a),C.renderItems()})).catch((e=>console.error(e)))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QixHSm1JQSw4QkE0QkYsSUFBSWQsRUExQkpiLEVBQWtCL0QsbUJBUWxCZSxFQUFleEYsaUJBQWlCLFNBQVMsS0FDdkMrSCxFQUFlLGdCQUFnQjFGLGtCQUMvQjBILEVBQWEzRixPQUNiLE1BQU1nRyxFQUFPYixFQUFTaEMsY0FDdEI3QixFQUFlbkYsTUFBUTZKLEVBQUtwTCxLQUM1QjJHLEVBQXFCcEYsTUFBUTZKLEVBQUsxQyxVQUFVLElBRzlDakMsRUFBaUJ6RixpQkFBaUIsU0FBUyxLQUN6QytILEVBQWUsYUFBYTFGLGtCQUM1QjhHLEVBQWEvRSxNQUFNLElBR3JCd0IsRUFBaUI1RixpQkFBaUIsU0FBUyxLQUN6QytILEVBQWUsdUJBQXVCMUYsa0JBQ3RDMkgsRUFBbUI1RixNQUFNLElBSzNCc0MsUUFBUTJELElBQUksQ0FBQ3hFLEVBQUlPLGtCQUFtQlAsRUFBSTBCLGdCQUNyQ2pCLE1BQU15QyxJQUNMUSxFQUFTTSxZQUFZZCxFQUFRLElBQzdCSCxRQUFRMEIsSUFBSXZCLEdBQ1pNLEVBQWMsSUFBSWpHLEVBQ2hCLENBQ0UzRSxLQUFNc0ssRUFBUSxHQUNkeEYsU0FBVzlFLElBQ1QsTUFBTTJLLEVBQWNKLEVBQVd2SyxHQUMvQjRLLEVBQVl4RixRQUFRdUYsRUFBWSxHQUdwQzdELEdBRUY4RCxFQUFZMUYsYUFBYSxJQUUxQitFLE9BQU9DLEdBQVFDLFFBQVFDLE1BQU1GLEkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZV9wcm9qZWN0X2Fyb3VuZHRoZXVzLy4vc3JjL2NvbXBvbmVudHMvQ2FyZC5qcyIsIndlYnBhY2s6Ly9zZV9wcm9qZWN0X2Fyb3VuZHRoZXVzLy4vc3JjL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qcyIsIndlYnBhY2s6Ly9zZV9wcm9qZWN0X2Fyb3VuZHRoZXVzLy4vc3JjL2NvbXBvbmVudHMvU2VjdGlvbi5qcyIsIndlYnBhY2s6Ly9zZV9wcm9qZWN0X2Fyb3VuZHRoZXVzLy4vc3JjL2NvbXBvbmVudHMvUG9wdXAuanMiLCJ3ZWJwYWNrOi8vc2VfcHJvamVjdF9hcm91bmR0aGV1cy8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aEZvcm0uanMiLCJ3ZWJwYWNrOi8vc2VfcHJvamVjdF9hcm91bmR0aGV1cy8uL3NyYy91dGlscy9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vc2VfcHJvamVjdF9hcm91bmR0aGV1cy8uL3NyYy9wYWdlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9zZV9wcm9qZWN0X2Fyb3VuZHRoZXVzLy4vc3JjL2NvbXBvbmVudHMvQXBpLmpzIiwid2VicGFjazovL3NlX3Byb2plY3RfYXJvdW5kdGhldXMvLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhJbWFnZS5qcyIsIndlYnBhY2s6Ly9zZV9wcm9qZWN0X2Fyb3VuZHRoZXVzLy4vc3JjL2NvbXBvbmVudHMvVXNlckluZm8uanMiLCJ3ZWJwYWNrOi8vc2VfcHJvamVjdF9hcm91bmR0aGV1cy8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aENvbmZpcm1hdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBDYXJkIHtcclxuICBjb25zdHJ1Y3RvcihkYXRhLCBjYXJkU2VsZWN0b3IsIGhhbmRsZUltYWdlQ2xpY2ssIGhhbmRsZURlbGV0ZSwgaGFuZGxlTGlrZSkge1xyXG4gICAgdGhpcy5fbmFtZSA9IGRhdGEubmFtZTtcclxuICAgIHRoaXMuX2xpbmsgPSBkYXRhLmxpbms7XHJcbiAgICB0aGlzLl9pc0xpa2VkID0gZGF0YS5pc0xpa2VkO1xyXG4gICAgdGhpcy5faWQgPSBkYXRhLl9pZDtcclxuICAgIHRoaXMuX2NhcmRTZWxlY3RvciA9IGNhcmRTZWxlY3RvcjtcclxuICAgIHRoaXMuX2hhbmRsZUltYWdlQ2xpY2sgPSBoYW5kbGVJbWFnZUNsaWNrO1xyXG4gICAgdGhpcy5faGFuZGxlRGVsZXRlID0gaGFuZGxlRGVsZXRlO1xyXG4gICAgdGhpcy5faGFuZGxlTGlrZSA9IGhhbmRsZUxpa2U7XHJcbiAgfVxyXG5cclxuICBfc2V0RXZlbnRMaXN0ZW5lcigpIHtcclxuICAgIHRoaXMuX2NhcmRMaWtlQnRuID0gdGhpcy5fY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX19ncm91cFwiKTtcclxuICAgIHRoaXMuX2NhcmRUcmFzaEJ0biA9IHRoaXMuX2NhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fdHJhc2gtYmluXCIpO1xyXG4gICAgdGhpcy5fY2FyZEltYWdlID0gdGhpcy5fY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX19pbWFnZVwiKTtcclxuXHJcbiAgICB0aGlzLl9jYXJkTGlrZUJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICB0aGlzLl9oYW5kbGVMaWtlKHsgaXNMaWtlZDogdGhpcy5faXNMaWtlZCwgaWQ6IHRoaXMuX2lkIH0sIHRoaXMpO1xyXG4gICAgfSk7XHJcbiAgICB0aGlzLl9jYXJkVHJhc2hCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgdGhpcy5faGFuZGxlRGVsZXRlKHRoaXMpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5fY2FyZEltYWdlLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgIHRoaXMuX2hhbmRsZUltYWdlQ2xpY2sodGhpcyk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIF9yZW5kZXJMaWtlcygpIHtcclxuICAgIGlmICh0aGlzLl9pc0xpa2VkKSB7XHJcbiAgICAgIHRoaXMuX2NhcmRMaWtlQnRuLmNsYXNzTGlzdC5hZGQoXCJjYXJkX19ncm91cF9hY3RpdmVcIik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLl9jYXJkTGlrZUJ0bi5jbGFzc0xpc3QucmVtb3ZlKFwiY2FyZF9fZ3JvdXBfYWN0aXZlXCIpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc2V0TGlrZSh2YWx1ZSkge1xyXG4gICAgdGhpcy5faXNMaWtlZCA9IHZhbHVlO1xyXG4gICAgdGhpcy5fcmVuZGVyTGlrZXMoKTtcclxuICB9XHJcblxyXG4gIGhhbmRsZVRyYXNoQnRuKHZhbHVlKSB7XHJcbiAgICB0aGlzLl9kZWxldGUgPSB2YWx1ZTtcclxuICAgIHRoaXMuX2NhcmRFbGVtZW50LnJlbW92ZSgpO1xyXG4gICAgdGhpcy5fY2FyZEVsZW1lbnQgPSBudWxsO1xyXG4gIH1cclxuXHJcbiAgX2dldFRlbXBsYXRlKCkge1xyXG4gICAgdGhpcy5fY2FyZEVsZW1lbnQgPSBkb2N1bWVudFxyXG4gICAgICAucXVlcnlTZWxlY3Rvcih0aGlzLl9jYXJkU2VsZWN0b3IpXHJcbiAgICAgIC5jb250ZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZFwiKVxyXG4gICAgICAuY2xvbmVOb2RlKHRydWUpO1xyXG4gICAgcmV0dXJuIHRoaXMuX2NhcmRFbGVtZW50O1xyXG4gIH1cclxuXHJcbiAgZ2VuZXJhdGVDYXJkKCkge1xyXG4gICAgdGhpcy5fZWxlbWVudCA9IHRoaXMuX2dldFRlbXBsYXRlKCk7XHJcbiAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVyKCk7XHJcbiAgICB0aGlzLl9yZW5kZXJMaWtlcygpO1xyXG4gICAgdGhpcy5fY2FyZFRpdGxlID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX3RpdGxlXCIpO1xyXG4gICAgdGhpcy5fY2FyZEltYWdlLnNyYyA9IHRoaXMuX2xpbms7XHJcbiAgICB0aGlzLl9jYXJkSW1hZ2UuYWx0ID0gdGhpcy5fbmFtZTtcclxuICAgIHRoaXMuX2NhcmRUaXRsZS50ZXh0Q29udGVudCA9IHRoaXMuX25hbWU7XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuX2VsZW1lbnQ7XHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIGZvcm1WYWxpZGF0b3Ige1xyXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMsIGZvcm1FbGVtZW50KSB7XHJcbiAgICB0aGlzLl9vcHRpb25zID0gb3B0aW9ucztcclxuICAgIHRoaXMuX2Zvcm1FbGVtZW50ID0gZm9ybUVsZW1lbnQ7XHJcbiAgICB0aGlzLl9idXR0b25FbGVtZW50ID0gdGhpcy5fZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvcihcclxuICAgICAgdGhpcy5fb3B0aW9ucy5zdWJtaXRCdXR0b25TZWxlY3RvclxyXG4gICAgKTtcclxuICAgIHRoaXMuX2lucHV0TGlzdCA9IFtcclxuICAgICAgLi4udGhpcy5fZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCh0aGlzLl9vcHRpb25zLmlucHV0U2VsZWN0b3IpLFxyXG4gICAgXTtcclxuICB9XHJcblxyXG4gIF9zaG93SW5wdXRFcnJvcigpIHtcclxuICAgIHRoaXMuX2Vycm9yRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgIGAuJHt0aGlzLl9pbnB1dEVsZW1lbnQuaWR9LWVycm9yYFxyXG4gICAgKTtcclxuICAgIHRoaXMuX2Vycm9yRWxlbWVudC50ZXh0Q29udGVudCA9IHRoaXMuX2lucHV0RWxlbWVudC52YWxpZGF0aW9uTWVzc2FnZTtcclxuICAgIHRoaXMuX2Vycm9yRWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX29wdGlvbnMuZXJyb3JDbGFzcyk7XHJcbiAgICB0aGlzLl9pbnB1dEVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLl9vcHRpb25zLmlucHV0Q2xhc3NFcnJvcik7XHJcbiAgfVxyXG5cclxuICBfaGlkZUlucHV0RXJyb3IoKSB7XHJcbiAgICB0aGlzLl9lcnJvckVsZW1lbnQgPSB0aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICBgLiR7dGhpcy5faW5wdXRFbGVtZW50LmlkfS1lcnJvcmBcclxuICAgICk7XHJcbiAgICB0aGlzLl9lcnJvckVsZW1lbnQudGV4dENvbnRlbnQgPSBcIlwiO1xyXG4gICAgdGhpcy5fZXJyb3JFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5fb3B0aW9ucy5lcnJvckNsYXNzKTtcclxuICAgIHRoaXMuX2lucHV0RWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX29wdGlvbnMuaW5wdXRDbGFzc0Vycm9yKTtcclxuICB9XHJcblxyXG4gIHJlc2V0VmFsaWRhdGlvbigpIHtcclxuICAgIHRoaXMudG9nZ2xlQnV0dG9uU3RhdGUoKTtcclxuICAgIHRoaXMuX2lucHV0TGlzdC5mb3JFYWNoKChpbnB1dEVsZW1lbnQpID0+IHtcclxuICAgICAgdGhpcy5faW5wdXRFbGVtZW50ID0gaW5wdXRFbGVtZW50O1xyXG4gICAgICB0aGlzLl9oaWRlSW5wdXRFcnJvcigpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBfaGFzSW52YWxpZElucHV0KCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2lucHV0TGlzdC5zb21lKChpbnB1dEVsZW1lbnQpID0+IHtcclxuICAgICAgcmV0dXJuICFpbnB1dEVsZW1lbnQudmFsaWRpdHkudmFsaWQ7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHRvZ2dsZUJ1dHRvblN0YXRlKCkge1xyXG4gICAgaWYgKHRoaXMuX2hhc0ludmFsaWRJbnB1dCgpKSB7XHJcbiAgICAgIHRoaXMuX2J1dHRvbkVsZW1lbnQuc2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIiwgdHJ1ZSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLl9idXR0b25FbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShcImRpc2FibGVkXCIpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgX2NoZWNrSW5wdXRWYWxpZGl0eSgpIHtcclxuICAgIGlmICghdGhpcy5faW5wdXRFbGVtZW50LnZhbGlkaXR5LnZhbGlkKSB7XHJcbiAgICAgIHRoaXMuX3Nob3dJbnB1dEVycm9yKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLl9oaWRlSW5wdXRFcnJvcigpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgX3NldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgdGhpcy5faW5wdXRMaXN0LmZvckVhY2goKGlucHV0RWxlbWVudCkgPT4ge1xyXG4gICAgICBpbnB1dEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsICgpID0+IHtcclxuICAgICAgICB0aGlzLl9pbnB1dEVsZW1lbnQgPSBpbnB1dEVsZW1lbnQ7XHJcbiAgICAgICAgdGhpcy5fY2hlY2tJbnB1dFZhbGlkaXR5KCk7XHJcbiAgICAgICAgdGhpcy50b2dnbGVCdXR0b25TdGF0ZSgpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZW5hYmxlVmFsaWRhdGlvbigpIHtcclxuICAgIHRoaXMuX2Zvcm1FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKGUpID0+IHtcclxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgfSk7XHJcbiAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVycygpO1xyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBTZWN0aW9uIHtcclxuICBjb25zdHJ1Y3Rvcih7IGRhdGEsIHJlbmRlcmVyIH0sIGNvbnRhaW5lcikge1xyXG4gICAgdGhpcy5faXRlbXMgPSBkYXRhO1xyXG4gICAgdGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjtcclxuICAgIHRoaXMuX2NvbnRhaW5lciA9IGNvbnRhaW5lcjtcclxuICB9XHJcblxyXG4gIHJlbmRlckl0ZW1zKCkge1xyXG4gICAgdGhpcy5faXRlbXMucmV2ZXJzZSgpLmZvckVhY2godGhpcy5fcmVuZGVyZXIpO1xyXG4gIH1cclxuXHJcbiAgYWRkSXRlbShlbGVtZW50KSB7XHJcbiAgICB0aGlzLl9jb250YWluZXIucHJlcGVuZChlbGVtZW50KTtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXAge1xyXG4gIGNvbnN0cnVjdG9yKHsgcG9wdXBTZWxlY3RvciB9KSB7XHJcbiAgICB0aGlzLl9wb3B1cEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHBvcHVwU2VsZWN0b3IpO1xyXG4gICAgdGhpcy5fY2xvc2VCdG4gPSB0aGlzLl9wb3B1cEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fY2xvc2UtYnRuXCIpO1xyXG4gIH1cclxuXHJcbiAgb3BlbigpIHtcclxuICAgIHRoaXMuX3BvcHVwRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwibW9kYWxfb3BlbmVkXCIpO1xyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5faGFuZGxlRXNjQ2xvc2UpO1xyXG4gIH1cclxuXHJcbiAgY2xvc2UoKSB7XHJcbiAgICB0aGlzLl9wb3B1cEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcIm1vZGFsX29wZW5lZFwiKTtcclxuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuX2hhbmRsZUVzY0Nsb3NlKTtcclxuICB9XHJcblxyXG4gIF9oYW5kbGVFc2NDbG9zZSA9IChlKSA9PiB7XHJcbiAgICBpZiAoZS5rZXkgPT09IFwiRXNjYXBlXCIpIHtcclxuICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHNldEV2ZW50TGlzdGVuZXIoKSB7XHJcbiAgICB0aGlzLl9jbG9zZUJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICB9KTtcclxuICAgIHRoaXMuX3BvcHVwRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIChlKSA9PiB7XHJcbiAgICAgIGlmIChlLnRhcmdldCA9PT0gdGhpcy5fcG9wdXBFbGVtZW50KSB7XHJcbiAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IFBvcHVwIGZyb20gXCIuL1BvcHVwLmpzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cFdpdGhGb3JtIGV4dGVuZHMgUG9wdXAge1xyXG4gIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IsIGhhbmRsZUZvcm1TdWJtaXQpIHtcclxuICAgIHN1cGVyKHsgcG9wdXBTZWxlY3RvciB9KTtcclxuICAgIHRoaXMuX3BvcHVwRm9ybSA9IHRoaXMuX3BvcHVwRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19mb3JtXCIpO1xyXG4gICAgdGhpcy5faGFuZGxlRm9ybVN1Ym1pdCA9IGhhbmRsZUZvcm1TdWJtaXQ7XHJcbiAgICB0aGlzLl9pbnB1dExpc3QgPSBbLi4udGhpcy5fcG9wdXBGb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoXCIubW9kYWxfX2lucHV0XCIpXTtcclxuICAgIHRoaXMuX21vZGFsQnRuID0gdGhpcy5fcG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX2J0blwiKTtcclxuICB9XHJcblxyXG4gIGNsb3NlKCkge1xyXG4gICAgc3VwZXIuY2xvc2UoKTtcclxuICAgIHRoaXMuX3BvcHVwRm9ybS5yZXNldCgpO1xyXG4gIH1cclxuXHJcbiAgX2dldFZhbHVlSW5wdXRzKCkge1xyXG4gICAgY29uc3QgZGF0YSA9IHt9O1xyXG4gICAgdGhpcy5faW5wdXRMaXN0LmZvckVhY2goKGlucHV0RWxlbWVudCkgPT4ge1xyXG4gICAgICBkYXRhW2lucHV0RWxlbWVudC5uYW1lXSA9IGlucHV0RWxlbWVudC52YWx1ZTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGRhdGE7XHJcbiAgfVxyXG5cclxuICByZW5kZXJMb2FkaW5nKGlzTG9hZGluZykge1xyXG4gICAgaWYgKGlzTG9hZGluZykge1xyXG4gICAgICB0aGlzLl9tb2RhbEJ0bi50ZXh0Q29udGVudCA9IFwiU2F2aW5nLi4uXCI7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLl9tb2RhbEJ0bi50ZXh0Q29udGVudCA9IFwiU2F2ZVwiO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc2V0RXZlbnRMaXN0ZW5lcigpIHtcclxuICAgIHRoaXMuX3BvcHVwRm9ybS5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsICgpID0+IHtcclxuICAgICAgdGhpcy5faGFuZGxlRm9ybVN1Ym1pdCh0aGlzLl9nZXRWYWx1ZUlucHV0cygpKTtcclxuICAgIH0pO1xyXG4gICAgc3VwZXIuc2V0RXZlbnRMaXN0ZW5lcigpO1xyXG4gIH1cclxufVxyXG4iLCIvLyA9PT09PT09IEVMRU1FTlRTID09PT09PT1cclxuXHJcbi8vIFdSQVBQRVJcclxuZXhwb3J0IGNvbnN0IHBhZ2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnBhZ2VcIik7XHJcbmV4cG9ydCBjb25zdCBwcm9maWxlTW9kYWwgPSBwYWdlLnF1ZXJ5U2VsZWN0b3IoXCIucHJvZmlsZS1tb2RhbFwiKTtcclxuXHJcbi8vIENBUkRTXHJcbmV4cG9ydCBjb25zdCBjYXJkc0xpc3QgPSBwYWdlLnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZHNfX2xpc3RcIik7XHJcblxyXG4vLyBCVE5TIC8gTk9ERVNcclxuZXhwb3J0IGNvbnN0IHByb2ZpbGVFZGl0QnRuID0gcGFnZS5xdWVyeVNlbGVjdG9yKFwiLnByb2ZpbGVfX2VkaXQtYnRuXCIpO1xyXG5leHBvcnQgY29uc3QgcHJvZmlsZUNyZWF0ZUJ0biA9IHBhZ2UucXVlcnlTZWxlY3RvcihcIi5wcm9maWxlX19jcmVhdGUtYnRuXCIpO1xyXG5leHBvcnQgY29uc3QgbW9kYWxJbnB1dE5hbWUgPSBwcm9maWxlTW9kYWwucXVlcnlTZWxlY3RvcihcclxuICBcIi5tb2RhbF9faW5wdXRfdHlwZV9uYW1lXCJcclxuKTtcclxuZXhwb3J0IGNvbnN0IG1vZGFsSW5wdXRPY2N1cGF0aW9uID0gcHJvZmlsZU1vZGFsLnF1ZXJ5U2VsZWN0b3IoXHJcbiAgXCIubW9kYWxfX2lucHV0X3R5cGVfb2NjdXBhdGlvblwiXHJcbik7XHJcbmV4cG9ydCBjb25zdCBwcm9maWxlSW1hZ2VFZGl0ID0gcGFnZS5xdWVyeVNlbGVjdG9yKFwiLnByb2ZpbGVfX2VkaXQtYXZhdGFyXCIpO1xyXG5cclxuLy8gU0VUVElOR1NcclxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IHtcclxuICBmb3JtU2VsZWN0b3I6IFwiLm1vZGFsX19mb3JtXCIsXHJcbiAgaW5wdXRTZWxlY3RvcjogXCIubW9kYWxfX2lucHV0XCIsXHJcbiAgc3VibWl0QnV0dG9uU2VsZWN0b3I6IFwiLm1vZGFsX19idG5cIixcclxuICBlcnJvckNsYXNzOiBcIm1vZGFsX19pbnB1dC1lcnJvcl9hY3RpdmVcIixcclxuICBpbnB1dENsYXNzRXJyb3I6IFwibW9kYWxfX2lucHV0X3R5cGVfZXJyb3JcIixcclxufTtcclxuIiwiLyogX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fICogXHJcblxyXG4qICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSU1QT1JUUyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcblxyXG4qICBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gKi9cclxuXHJcbmltcG9ydCBDYXJkIGZyb20gXCIuLi9jb21wb25lbnRzL0NhcmQuanNcIjtcclxuaW1wb3J0IEZvcm1WYWxpZGF0b3IgZnJvbSBcIi4uL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qc1wiO1xyXG5pbXBvcnQgU2VjdGlvbiBmcm9tIFwiLi4vY29tcG9uZW50cy9TZWN0aW9uLmpzXCI7XHJcbmltcG9ydCBQb3B1cFdpdGhJbWFnZSBmcm9tIFwiLi4vY29tcG9uZW50cy9Qb3B1cFdpdGhJbWFnZS5qc1wiO1xyXG5pbXBvcnQgUG9wdXBXaXRoRm9ybSBmcm9tIFwiLi4vY29tcG9uZW50cy9Qb3B1cFdpdGhGb3JtLmpzXCI7XHJcbmltcG9ydCBQb3B1cFdpdGhDb25maXJtYXRpb24gZnJvbSBcIi4uL2NvbXBvbmVudHMvUG9wdXBXaXRoQ29uZmlybWF0aW9uLmpzXCI7XHJcbmltcG9ydCBVc2VySW5mbyBmcm9tIFwiLi4vY29tcG9uZW50cy9Vc2VySW5mby5qc1wiO1xyXG5pbXBvcnQgQXBpIGZyb20gXCIuLi9jb21wb25lbnRzL0FwaS5qc1wiO1xyXG5cclxuaW1wb3J0IHtcclxuICBjYXJkc0xpc3QsXHJcbiAgcHJvZmlsZUVkaXRCdG4sXHJcbiAgcHJvZmlsZUNyZWF0ZUJ0bixcclxuICBtb2RhbElucHV0TmFtZSxcclxuICBtb2RhbElucHV0T2NjdXBhdGlvbixcclxuICBjb25maWcsXHJcbiAgcHJvZmlsZUltYWdlRWRpdCxcclxufSBmcm9tIFwiLi4vdXRpbHMvY29uc3RhbnRzLmpzXCI7XHJcbmltcG9ydCBcIi4vaW5kZXguY3NzXCI7XHJcblxyXG4vKiBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gKiBcclxuXHJcbiogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDTEFTUyBJTlNUQU5DRVMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuXHJcbiogIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXyAqL1xyXG5cclxuY29uc3QgYXBpID0gbmV3IEFwaSh7XHJcbiAgYmFzZVVybDogXCJodHRwczovL2Fyb3VuZC1hcGkuZW4udHJpcGxldGVuLXNlcnZpY2VzLmNvbS92MVwiLFxyXG4gIGhlYWRlcnM6IHtcclxuICAgIGF1dGhvcml6YXRpb246IFwiM2M1OTA5YmQtZDFjMS00MzlkLTgzNjEtNzU3YjNlZjNlM2I0XCIsXHJcbiAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcclxuICB9LFxyXG59KTtcclxuXHJcbmNvbnN0IGZvcm1WYWxpZGF0b3JzID0ge307XHJcblxyXG5jb25zdCBlbmFibGVWYWxpZGF0aW9uID0gKGNvbmZpZykgPT4ge1xyXG4gIGNvbnN0IGZvcm1MaXN0ID0gWy4uLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoY29uZmlnLmZvcm1TZWxlY3RvcildO1xyXG4gIGZvcm1MaXN0LmZvckVhY2goKGZvcm1FbGVtZW50KSA9PiB7XHJcbiAgICBjb25zdCB2YWxpZGF0b3IgPSBuZXcgRm9ybVZhbGlkYXRvcihjb25maWcsIGZvcm1FbGVtZW50KTtcclxuICAgIGNvbnN0IGZvcm1OYW1lID0gZm9ybUVsZW1lbnQuZ2V0QXR0cmlidXRlKFwibmFtZVwiKTtcclxuICAgIGZvcm1WYWxpZGF0b3JzW2Zvcm1OYW1lXSA9IHZhbGlkYXRvcjtcclxuICAgIHZhbGlkYXRvci5lbmFibGVWYWxpZGF0aW9uKCk7XHJcbiAgfSk7XHJcbn07XHJcbmVuYWJsZVZhbGlkYXRpb24oY29uZmlnKTtcclxuXHJcbmNvbnN0IGhhbmRsZUltYWdlQ2xpY2sgPSAoZGF0YSkgPT4ge1xyXG4gIGltYWdlUG9wdXAub3BlbihkYXRhKTtcclxufTtcclxuXHJcbmNvbnN0IGhhbmRsZURlbGV0ZSA9IChjYXJkKSA9PiB7XHJcbiAgY29uZmlybWF0aW9uUG9wdXAub3BlbigpO1xyXG4gIGNvbmZpcm1hdGlvblBvcHVwLnNldFN1Ym1pdEFjdGlvbigoKSA9PiB7XHJcbiAgICBhcGlcclxuICAgICAgLmRlbGV0ZUNhcmQoY2FyZClcclxuICAgICAgLnRoZW4oKCkgPT4ge30pXHJcbiAgICAgIC5jYXRjaCgoZXJyKSA9PiBjb25zb2xlLmVycm9yKGVycikpO1xyXG4gICAgY29uZmlybWF0aW9uUG9wdXAuY2xvc2UoKTtcclxuICAgIGNhcmQuaGFuZGxlVHJhc2hCdG4oKTtcclxuICB9KTtcclxufTtcclxuXHJcbmNvbnN0IGhhbmRsZUxpa2UgPSAoZGF0YSwgc3BlY2lmaWNDYXJkKSA9PiB7XHJcbiAgYXBpXHJcbiAgICAubGlrZUNhcmQoZGF0YSlcclxuICAgIC50aGVuKChyZXN1bHRzKSA9PiB7XHJcbiAgICAgIHNwZWNpZmljQ2FyZC5zZXRMaWtlKHJlc3VsdHMuaXNMaWtlZCk7XHJcbiAgICB9KVxyXG4gICAgLmNhdGNoKChlcnIpID0+IGNvbnNvbGUuZXJyb3IoZXJyKSk7XHJcbn07XHJcblxyXG5jb25zdCBjcmVhdGVDYXJkID0gKGRhdGEpID0+IHtcclxuICBjb25zdCBjYXJkID0gbmV3IENhcmQoXHJcbiAgICBkYXRhLFxyXG4gICAgXCIjY2FyZF9fdGVtcGxhdGVcIixcclxuICAgIGhhbmRsZUltYWdlQ2xpY2ssXHJcbiAgICBoYW5kbGVEZWxldGUsXHJcbiAgICBoYW5kbGVMaWtlXHJcbiAgKTtcclxuICByZXR1cm4gY2FyZC5nZW5lcmF0ZUNhcmQoKTtcclxufTtcclxuXHJcbmNvbnN0IGltYWdlUG9wdXAgPSBuZXcgUG9wdXBXaXRoSW1hZ2UoXCIucGljdHVyZS1tb2RhbFwiKTtcclxuaW1hZ2VQb3B1cC5zZXRFdmVudExpc3RlbmVyKCk7XHJcblxyXG5jb25zdCBuZXdDYXJkUG9wdXAgPSBuZXcgUG9wdXBXaXRoRm9ybShcIi5hZGQtY2FyZC1tb2RhbFwiLCAoZGF0YSkgPT4ge1xyXG4gIG5ld0NhcmRQb3B1cC5yZW5kZXJMb2FkaW5nKHRydWUpO1xyXG4gIG5ld0NhcmRQb3B1cC5jbG9zZSgpO1xyXG4gIGFwaVxyXG4gICAgLmFkZE5ld0NhcmQoZGF0YSlcclxuICAgIC50aGVuKChyZXN1bHRzKSA9PiB7XHJcbiAgICAgIGNvbnN0IGNhcmRFbGVtZW50ID0gY3JlYXRlQ2FyZChyZXN1bHRzKTtcclxuICAgICAgY2FyZFNlY3Rpb24uYWRkSXRlbShjYXJkRWxlbWVudCk7XHJcbiAgICB9KVxyXG4gICAgLmNhdGNoKChlcnIpID0+IGNvbnNvbGUuZXJyb3IoZXJyKSlcclxuICAgIC5maW5hbGx5KCgpID0+IHtcclxuICAgICAgbmV3Q2FyZFBvcHVwLnJlbmRlckxvYWRpbmcoZmFsc2UpO1xyXG4gICAgfSk7XHJcbn0pO1xyXG5uZXdDYXJkUG9wdXAuc2V0RXZlbnRMaXN0ZW5lcigpO1xyXG5cclxuY29uc3QgdXNlckluZm8gPSBuZXcgVXNlckluZm8oXHJcbiAgXCIucHJvZmlsZV9fbmFtZVwiLFxyXG4gIFwiLnByb2ZpbGVfX29jY3VwYXRpb25cIixcclxuICBcIi5wcm9maWxlX19hdmF0YXJcIlxyXG4pO1xyXG5cclxuY29uc3QgcHJvZmlsZVBvcHVwID0gbmV3IFBvcHVwV2l0aEZvcm0oXCIucHJvZmlsZS1tb2RhbFwiLCAoZGF0YSkgPT4ge1xyXG4gIHByb2ZpbGVQb3B1cC5yZW5kZXJMb2FkaW5nKHRydWUpO1xyXG4gIHByb2ZpbGVQb3B1cC5jbG9zZSgpO1xyXG4gIGFwaVxyXG4gICAgLmVkaXRVc2VySW5mbyhkYXRhKVxyXG4gICAgLnRoZW4oKHJlc3VsdHMpID0+IHtcclxuICAgICAgdXNlckluZm8uc2V0VXNlckluZm8ocmVzdWx0cyk7XHJcbiAgICB9KVxyXG4gICAgLmNhdGNoKChlcnIpID0+IGNvbnNvbGUuZXJyb3IoZXJyKSlcclxuICAgIC5maW5hbGx5KCgpID0+IHtcclxuICAgICAgcHJvZmlsZVBvcHVwLnJlbmRlckxvYWRpbmcoZmFsc2UpO1xyXG4gICAgfSk7XHJcbn0pO1xyXG5wcm9maWxlUG9wdXAuc2V0RXZlbnRMaXN0ZW5lcigpO1xyXG5cclxuY29uc3QgY2hhbmdlUHJvZmlsZVBvcHVwID0gbmV3IFBvcHVwV2l0aEZvcm0oXHJcbiAgXCIuY2hhbmdlLXByb2ZpbGUtbW9kYWxcIixcclxuICAoeyB1cmwgfSkgPT4ge1xyXG4gICAgY2hhbmdlUHJvZmlsZVBvcHVwLnJlbmRlckxvYWRpbmcodHJ1ZSk7XHJcbiAgICBjaGFuZ2VQcm9maWxlUG9wdXAuY2xvc2UoKTtcclxuICAgIGFwaVxyXG4gICAgICAuZWRpdFVzZXJJbWFnZSh1cmwpXHJcbiAgICAgIC50aGVuKChyZXN1bHRzKSA9PiB7XHJcbiAgICAgICAgdXNlckluZm8uY2hhbmdlVXNlclBob3RvKHJlc3VsdHNbXCJhdmF0YXJcIl0pO1xyXG4gICAgICB9KVxyXG4gICAgICAuY2F0Y2goKGVycikgPT4gY29uc29sZS5lcnJvcihlcnIpKVxyXG4gICAgICAuZmluYWxseSgoKSA9PiB7XHJcbiAgICAgICAgY2hhbmdlUHJvZmlsZVBvcHVwLnJlbmRlckxvYWRpbmcoZmFsc2UpO1xyXG4gICAgICB9KTtcclxuICB9XHJcbik7XHJcbmNoYW5nZVByb2ZpbGVQb3B1cC5zZXRFdmVudExpc3RlbmVyKCk7XHJcblxyXG5jb25zdCBjb25maXJtYXRpb25Qb3B1cCA9IG5ldyBQb3B1cFdpdGhDb25maXJtYXRpb24oXHJcbiAgXCIuZGVsZXRlLWNvbmZpcm1hdGlvbi1tb2RhbFwiXHJcbik7XHJcbmNvbmZpcm1hdGlvblBvcHVwLnNldEV2ZW50TGlzdGVuZXIoKTtcclxuXHJcbi8qIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXyAqIFxyXG4gIFxyXG4gICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEVWRU5UIExJU1RFTkVSUyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICBcclxuICAqICBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gKi9cclxuXHJcbnByb2ZpbGVFZGl0QnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgZm9ybVZhbGlkYXRvcnNbXCJwcm9maWxlLWZvcm1cIl0ucmVzZXRWYWxpZGF0aW9uKCk7XHJcbiAgcHJvZmlsZVBvcHVwLm9wZW4oKTtcclxuICBjb25zdCBpbmZvID0gdXNlckluZm8uZ2V0VXNlckluZm8oKTtcclxuICBtb2RhbElucHV0TmFtZS52YWx1ZSA9IGluZm8ubmFtZTtcclxuICBtb2RhbElucHV0T2NjdXBhdGlvbi52YWx1ZSA9IGluZm8ub2NjdXBhdGlvbjtcclxufSk7XHJcblxyXG5wcm9maWxlQ3JlYXRlQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgZm9ybVZhbGlkYXRvcnNbXCJjYXJkLWZvcm1cIl0ucmVzZXRWYWxpZGF0aW9uKCk7XHJcbiAgbmV3Q2FyZFBvcHVwLm9wZW4oKTtcclxufSk7XHJcblxyXG5wcm9maWxlSW1hZ2VFZGl0LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgZm9ybVZhbGlkYXRvcnNbXCJjaGFuZ2UtcHJvZmlsZS1mb3JtXCJdLnJlc2V0VmFsaWRhdGlvbigpO1xyXG4gIGNoYW5nZVByb2ZpbGVQb3B1cC5vcGVuKCk7XHJcbn0pO1xyXG5cclxubGV0IGNhcmRTZWN0aW9uO1xyXG5cclxuUHJvbWlzZS5hbGwoW2FwaS5nZXRJbml0aWFsQ2FyZHMoKSwgYXBpLmdldFVzZXJJbmZvKCldKVxyXG4gIC50aGVuKChyZXN1bHRzKSA9PiB7XHJcbiAgICB1c2VySW5mby5zZXRVc2VySW5mbyhyZXN1bHRzWzFdKTtcclxuICAgIGNvbnNvbGUubG9nKHJlc3VsdHMpO1xyXG4gICAgY2FyZFNlY3Rpb24gPSBuZXcgU2VjdGlvbihcclxuICAgICAge1xyXG4gICAgICAgIGRhdGE6IHJlc3VsdHNbMF0sXHJcbiAgICAgICAgcmVuZGVyZXI6IChkYXRhKSA9PiB7XHJcbiAgICAgICAgICBjb25zdCBjYXJkRWxlbWVudCA9IGNyZWF0ZUNhcmQoZGF0YSk7XHJcbiAgICAgICAgICBjYXJkU2VjdGlvbi5hZGRJdGVtKGNhcmRFbGVtZW50KTtcclxuICAgICAgICB9LFxyXG4gICAgICB9LFxyXG4gICAgICBjYXJkc0xpc3RcclxuICAgICk7XHJcbiAgICBjYXJkU2VjdGlvbi5yZW5kZXJJdGVtcygpO1xyXG4gIH0pXHJcbiAgLmNhdGNoKChlcnIpID0+IGNvbnNvbGUuZXJyb3IoZXJyKSk7XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIEFwaSB7XHJcbiAgY29uc3RydWN0b3IoeyBiYXNlVXJsLCBoZWFkZXJzIH0pIHtcclxuICAgIHRoaXMuX2Jhc2VVcmwgPSBiYXNlVXJsO1xyXG4gICAgdGhpcy5fYXV0aG9yaXphdGlvbiA9IGhlYWRlcnMuYXV0aG9yaXphdGlvbjtcclxuICAgIHRoaXMuX2NvbnRlbnRUeXBlID0gaGVhZGVyc1tcImNvbnRlbnQtdHlwZVwiXTtcclxuICB9XHJcblxyXG4gIGdldEluaXRpYWxDYXJkcygpIHtcclxuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkc2AsIHtcclxuICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgIGF1dGhvcml6YXRpb246IHRoaXMuX2F1dGhvcml6YXRpb24sXHJcbiAgICAgIH0sXHJcbiAgICB9KS50aGVuKChyZXMpID0+IHtcclxuICAgICAgaWYgKHJlcy5vaykge1xyXG4gICAgICAgIHJldHVybiByZXMuanNvbigpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChgRXJyb3I6ICR7cmVzLnN0YXR1c31gKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgYWRkTmV3Q2FyZCh7IG5hbWUsIGxpbmsgfSkge1xyXG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L2NhcmRzYCwge1xyXG4gICAgICBtZXRob2Q6IFwiUE9TVFwiLFxyXG4gICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgYXV0aG9yaXphdGlvbjogdGhpcy5fYXV0aG9yaXphdGlvbixcclxuICAgICAgICBcImNvbnRlbnQtdHlwZVwiOiB0aGlzLl9jb250ZW50VHlwZSxcclxuICAgICAgfSxcclxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgIG5hbWUsXHJcbiAgICAgICAgbGluayxcclxuICAgICAgfSksXHJcbiAgICB9KS50aGVuKChyZXMpID0+IHtcclxuICAgICAgaWYgKHJlcy5vaykge1xyXG4gICAgICAgIHJldHVybiByZXMuanNvbigpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChgRXJyb3I6ICR7cmVzLnN0YXR1c31gKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZGVsZXRlQ2FyZCh7IF9pZCB9KSB7XHJcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vY2FyZHMvJHtfaWR9YCwge1xyXG4gICAgICBtZXRob2Q6IFwiREVMRVRFXCIsXHJcbiAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICBhdXRob3JpemF0aW9uOiB0aGlzLl9hdXRob3JpemF0aW9uLFxyXG4gICAgICB9LFxyXG4gICAgfSkudGhlbigocmVzKSA9PiB7XHJcbiAgICAgIGlmIChyZXMub2spIHtcclxuICAgICAgICByZXR1cm4gcmVzLmpzb24oKTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoYEVycm9yOiAke3Jlcy5zdGF0dXN9YCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGxpa2VDYXJkKHsgaXNMaWtlZCwgaWQgfSkge1xyXG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L2NhcmRzLyR7aWR9L2xpa2VzYCwge1xyXG4gICAgICBtZXRob2Q6IGlzTGlrZWQgPyBcIkRFTEVURVwiIDogXCJQVVRcIixcclxuICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgIGF1dGhvcml6YXRpb246IHRoaXMuX2F1dGhvcml6YXRpb24sXHJcbiAgICAgIH0sXHJcbiAgICB9KS50aGVuKChyZXMpID0+IHtcclxuICAgICAgaWYgKHJlcy5vaykge1xyXG4gICAgICAgIHJldHVybiByZXMuanNvbigpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChgRXJyb3I6ICR7cmVzLnN0YXR1c31gKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZ2V0VXNlckluZm8oKSB7XHJcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vdXNlcnMvbWVgLCB7XHJcbiAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICBhdXRob3JpemF0aW9uOiB0aGlzLl9hdXRob3JpemF0aW9uLFxyXG4gICAgICB9LFxyXG4gICAgfSkudGhlbigocmVzKSA9PiB7XHJcbiAgICAgIGlmIChyZXMub2spIHtcclxuICAgICAgICByZXR1cm4gcmVzLmpzb24oKTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoYEVycm9yOiAke3Jlcy5zdGF0dXN9YCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGVkaXRVc2VySW5mbyh7IG5hbWUsIG9jY3VwYXRpb24gfSkge1xyXG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L3VzZXJzL21lYCwge1xyXG4gICAgICBtZXRob2Q6IFwiUEFUQ0hcIixcclxuICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgIGF1dGhvcml6YXRpb246IHRoaXMuX2F1dGhvcml6YXRpb24sXHJcbiAgICAgICAgXCJjb250ZW50LXR5cGVcIjogdGhpcy5fY29udGVudFR5cGUsXHJcbiAgICAgIH0sXHJcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICBuYW1lLFxyXG4gICAgICAgIGFib3V0OiBvY2N1cGF0aW9uLFxyXG4gICAgICB9KSxcclxuICAgIH0pLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICBpZiAocmVzLm9rKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlcy5qc29uKCk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGBFcnJvcjogJHtyZXMuc3RhdHVzfWApO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBlZGl0VXNlckltYWdlKHVybCkge1xyXG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L3VzZXJzL21lL2F2YXRhcmAsIHtcclxuICAgICAgbWV0aG9kOiBcIlBBVENIXCIsXHJcbiAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICBhdXRob3JpemF0aW9uOiB0aGlzLl9hdXRob3JpemF0aW9uLFxyXG4gICAgICAgIFwiY29udGVudC10eXBlXCI6IHRoaXMuX2NvbnRlbnRUeXBlLFxyXG4gICAgICB9LFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgYXZhdGFyOiB1cmwsXHJcbiAgICAgIH0pLFxyXG4gICAgfSkudGhlbigocmVzKSA9PiB7XHJcbiAgICAgIGlmIChyZXMub2spIHtcclxuICAgICAgICByZXR1cm4gcmVzLmpzb24oKTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoYEVycm9yOiAke3Jlcy5zdGF0dXN9YCk7XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IFBvcHVwIGZyb20gXCIuL1BvcHVwLmpzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cFdpdGhJbWFnZSBleHRlbmRzIFBvcHVwIHtcclxuICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yKSB7XHJcbiAgICBzdXBlcih7IHBvcHVwU2VsZWN0b3IgfSk7XHJcbiAgICB0aGlzLl9waWN0dXJlSW1hZ2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnBpY3R1cmUtbW9kYWxfX2ltYWdlXCIpO1xyXG4gICAgdGhpcy5fcGljdHVyZVRpdGxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5waWN0dXJlLW1vZGFsX190aXRsZVwiKTtcclxuICB9XHJcblxyXG4gIG9wZW4oeyBfbmFtZSwgX2xpbmsgfSkge1xyXG4gICAgdGhpcy5fcGljdHVyZUltYWdlLnNyYyA9IF9saW5rO1xyXG4gICAgdGhpcy5fcGljdHVyZUltYWdlLmFsdCA9IF9uYW1lO1xyXG4gICAgdGhpcy5fcGljdHVyZVRpdGxlLnRleHRDb250ZW50ID0gX25hbWU7XHJcbiAgICBzdXBlci5vcGVuKCk7XHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFVzZXJJbmZvIHtcclxuICBjb25zdHJ1Y3RvcihuYW1lU2VsZWN0b3IsIG9jY3VwYXRpb25TZWxlY3RvciwgYXZhdGFyU2VsZWN0b3IpIHtcclxuICAgIHRoaXMuX25hbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKG5hbWVTZWxlY3Rvcik7XHJcbiAgICB0aGlzLl9vY2N1cGF0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihvY2N1cGF0aW9uU2VsZWN0b3IpO1xyXG4gICAgdGhpcy5fYXZhdGFyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihhdmF0YXJTZWxlY3Rvcik7XHJcbiAgfVxyXG5cclxuICBnZXRVc2VySW5mbygpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIG5hbWU6IHRoaXMuX25hbWUudGV4dENvbnRlbnQsXHJcbiAgICAgIG9jY3VwYXRpb246IHRoaXMuX29jY3VwYXRpb24udGV4dENvbnRlbnQsXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgc2V0VXNlckluZm8oeyBuYW1lLCBhYm91dCwgYXZhdGFyIH0pIHtcclxuICAgIHRoaXMuX25hbWUudGV4dENvbnRlbnQgPSBuYW1lO1xyXG4gICAgdGhpcy5fb2NjdXBhdGlvbi50ZXh0Q29udGVudCA9IGFib3V0O1xyXG4gICAgdGhpcy5fYXZhdGFyLnNyYyA9IGF2YXRhcjtcclxuICB9XHJcblxyXG4gIGNoYW5nZVVzZXJQaG90byhhdmF0YXIpIHtcclxuICAgIHRoaXMuX2F2YXRhci5zcmMgPSBhdmF0YXI7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBQb3B1cCBmcm9tIFwiLi9Qb3B1cC5qc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXBXaXRoQ29uZmlybWF0aW9uIGV4dGVuZHMgUG9wdXAge1xyXG4gIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IpIHtcclxuICAgIHN1cGVyKHsgcG9wdXBTZWxlY3RvciB9KTtcclxuICAgIHRoaXMuX2J1dHRvbiA9IHRoaXMuX3BvcHVwRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19idG5cIik7XHJcbiAgfVxyXG5cclxuICBzZXRTdWJtaXRBY3Rpb24oZm4pIHtcclxuICAgIHRoaXMuX2hhbmRsZVN1Ym1pdCA9IGZuO1xyXG4gIH1cclxuXHJcbiAgc2V0RXZlbnRMaXN0ZW5lcigpIHtcclxuICAgIHN1cGVyLnNldEV2ZW50TGlzdGVuZXIoKTtcclxuICAgIHRoaXMuX2J1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICB0aGlzLl9oYW5kbGVTdWJtaXQoKTtcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iXSwibmFtZXMiOlsiQ2FyZCIsImNvbnN0cnVjdG9yIiwiZGF0YSIsImNhcmRTZWxlY3RvciIsImhhbmRsZUltYWdlQ2xpY2siLCJoYW5kbGVEZWxldGUiLCJoYW5kbGVMaWtlIiwidGhpcyIsIl9uYW1lIiwibmFtZSIsIl9saW5rIiwibGluayIsIl9pc0xpa2VkIiwiaXNMaWtlZCIsIl9pZCIsIl9jYXJkU2VsZWN0b3IiLCJfaGFuZGxlSW1hZ2VDbGljayIsIl9oYW5kbGVEZWxldGUiLCJfaGFuZGxlTGlrZSIsIl9zZXRFdmVudExpc3RlbmVyIiwiX2NhcmRMaWtlQnRuIiwiX2NhcmRFbGVtZW50IiwicXVlcnlTZWxlY3RvciIsIl9jYXJkVHJhc2hCdG4iLCJfY2FyZEltYWdlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImlkIiwiX3JlbmRlckxpa2VzIiwiY2xhc3NMaXN0IiwiYWRkIiwicmVtb3ZlIiwic2V0TGlrZSIsInZhbHVlIiwiaGFuZGxlVHJhc2hCdG4iLCJfZGVsZXRlIiwiX2dldFRlbXBsYXRlIiwiZG9jdW1lbnQiLCJjb250ZW50IiwiY2xvbmVOb2RlIiwiZ2VuZXJhdGVDYXJkIiwiX2VsZW1lbnQiLCJfY2FyZFRpdGxlIiwic3JjIiwiYWx0IiwidGV4dENvbnRlbnQiLCJmb3JtVmFsaWRhdG9yIiwib3B0aW9ucyIsImZvcm1FbGVtZW50IiwiX29wdGlvbnMiLCJfZm9ybUVsZW1lbnQiLCJfYnV0dG9uRWxlbWVudCIsInN1Ym1pdEJ1dHRvblNlbGVjdG9yIiwiX2lucHV0TGlzdCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJpbnB1dFNlbGVjdG9yIiwiX3Nob3dJbnB1dEVycm9yIiwiX2Vycm9yRWxlbWVudCIsIl9pbnB1dEVsZW1lbnQiLCJ2YWxpZGF0aW9uTWVzc2FnZSIsImVycm9yQ2xhc3MiLCJpbnB1dENsYXNzRXJyb3IiLCJfaGlkZUlucHV0RXJyb3IiLCJyZXNldFZhbGlkYXRpb24iLCJ0b2dnbGVCdXR0b25TdGF0ZSIsImZvckVhY2giLCJpbnB1dEVsZW1lbnQiLCJfaGFzSW52YWxpZElucHV0Iiwic29tZSIsInZhbGlkaXR5IiwidmFsaWQiLCJzZXRBdHRyaWJ1dGUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJfY2hlY2tJbnB1dFZhbGlkaXR5IiwiX3NldEV2ZW50TGlzdGVuZXJzIiwiZW5hYmxlVmFsaWRhdGlvbiIsImUiLCJwcmV2ZW50RGVmYXVsdCIsIlNlY3Rpb24iLCJfcmVmIiwiY29udGFpbmVyIiwicmVuZGVyZXIiLCJfaXRlbXMiLCJfcmVuZGVyZXIiLCJfY29udGFpbmVyIiwicmVuZGVySXRlbXMiLCJyZXZlcnNlIiwiYWRkSXRlbSIsImVsZW1lbnQiLCJwcmVwZW5kIiwiUG9wdXAiLCJwb3B1cFNlbGVjdG9yIiwiX3BvcHVwRWxlbWVudCIsIl9jbG9zZUJ0biIsIm9wZW4iLCJfaGFuZGxlRXNjQ2xvc2UiLCJjbG9zZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJrZXkiLCJzZXRFdmVudExpc3RlbmVyIiwidGFyZ2V0IiwiUG9wdXBXaXRoRm9ybSIsImhhbmRsZUZvcm1TdWJtaXQiLCJzdXBlciIsIl9wb3B1cEZvcm0iLCJfaGFuZGxlRm9ybVN1Ym1pdCIsIl9tb2RhbEJ0biIsInJlc2V0IiwiX2dldFZhbHVlSW5wdXRzIiwicmVuZGVyTG9hZGluZyIsImlzTG9hZGluZyIsInBhZ2UiLCJwcm9maWxlTW9kYWwiLCJjYXJkc0xpc3QiLCJwcm9maWxlRWRpdEJ0biIsInByb2ZpbGVDcmVhdGVCdG4iLCJtb2RhbElucHV0TmFtZSIsIm1vZGFsSW5wdXRPY2N1cGF0aW9uIiwicHJvZmlsZUltYWdlRWRpdCIsImFwaSIsImJhc2VVcmwiLCJoZWFkZXJzIiwiX2Jhc2VVcmwiLCJfYXV0aG9yaXphdGlvbiIsImF1dGhvcml6YXRpb24iLCJfY29udGVudFR5cGUiLCJnZXRJbml0aWFsQ2FyZHMiLCJmZXRjaCIsInRoZW4iLCJyZXMiLCJvayIsImpzb24iLCJQcm9taXNlIiwicmVqZWN0Iiwic3RhdHVzIiwiYWRkTmV3Q2FyZCIsIl9yZWYyIiwibWV0aG9kIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJkZWxldGVDYXJkIiwiX3JlZjMiLCJsaWtlQ2FyZCIsIl9yZWY0IiwiZ2V0VXNlckluZm8iLCJlZGl0VXNlckluZm8iLCJfcmVmNSIsIm9jY3VwYXRpb24iLCJhYm91dCIsImVkaXRVc2VySW1hZ2UiLCJ1cmwiLCJhdmF0YXIiLCJmb3JtVmFsaWRhdG9ycyIsImNvbmZpZyIsImZvcm1TZWxlY3RvciIsInZhbGlkYXRvciIsIkZvcm1WYWxpZGF0b3IiLCJmb3JtTmFtZSIsImdldEF0dHJpYnV0ZSIsImltYWdlUG9wdXAiLCJjYXJkIiwiY29uZmlybWF0aW9uUG9wdXAiLCJzZXRTdWJtaXRBY3Rpb24iLCJjYXRjaCIsImVyciIsImNvbnNvbGUiLCJlcnJvciIsInNwZWNpZmljQ2FyZCIsInJlc3VsdHMiLCJjcmVhdGVDYXJkIiwiX3BpY3R1cmVJbWFnZSIsIl9waWN0dXJlVGl0bGUiLCJuZXdDYXJkUG9wdXAiLCJjYXJkRWxlbWVudCIsImNhcmRTZWN0aW9uIiwiZmluYWxseSIsInVzZXJJbmZvIiwibmFtZVNlbGVjdG9yIiwib2NjdXBhdGlvblNlbGVjdG9yIiwiYXZhdGFyU2VsZWN0b3IiLCJfb2NjdXBhdGlvbiIsIl9hdmF0YXIiLCJzZXRVc2VySW5mbyIsImNoYW5nZVVzZXJQaG90byIsInByb2ZpbGVQb3B1cCIsImNoYW5nZVByb2ZpbGVQb3B1cCIsIl9idXR0b24iLCJmbiIsIl9oYW5kbGVTdWJtaXQiLCJpbmZvIiwiYWxsIiwibG9nIl0sInNvdXJjZVJvb3QiOiIifQ==